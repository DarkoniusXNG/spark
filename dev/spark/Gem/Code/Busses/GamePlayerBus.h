#pragma once

/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
#pragma once

#include <AzCore/Component/ComponentBus.h>
#include <GridMate/Replica/ReplicaDefs.h>
#include <GridMate/Session/Session.h>

#include <SteamWorks/SteamWorksBus.h>

#include "Busses/UnitBus.h"

namespace spark
{
	// Enumeration callback
	typedef AZStd::function<void(const AZ::EntityId&)> PlayersEnumerateCallback;     
	typedef int16_t SparkPlayerId;
	// typedef AZ::u32 MemberIDCompact;, use 0 as invalid
	static SparkPlayerId SparkInvalidPlayerId = -1;

	class GamePlayerInterface : public AZ::ComponentBus
	{
	public:
		// EBusTraits
		static const AZ::EBusHandlerPolicy HandlerPolicy = AZ::EBusHandlerPolicy::Single;

		// GamePlayerInterface

		// Sets player's UI-repesentable name
		virtual void SetName(const AZStd::string &name) = 0;
		virtual AZStd::string GetName() const = 0;

		// player id's
		virtual SparkPlayerId GetPlayerId() const = 0;
		virtual void SetPlayerId(const SparkPlayerId &) = 0;
		// peer id's
		virtual GridMate::PeerId GetPeerId() const = 0;
		virtual void SetPeerId(const GridMate::PeerId &) = 0;
		// steam id's
		virtual CSteamID GetSteamId() const = 0;
		virtual void SetSteamId(const CSteamID &) = 0;

		// Enumerate players
		virtual void Enumerate(PlayersEnumerateCallback callback) = 0;

        virtual AZStd::string GetSelectedHero() const = 0;
        virtual UnitId GetSelectedHeroEntity() const = 0;
        virtual void SetSelectedHero(const AZStd::string&) = 0;
		virtual TeamId GetTeamId() const = 0;
		virtual void SetTeamId(const TeamId&) = 0;
		virtual bool GetConnected() const = 0;
		virtual void SetConnected(const bool&) = 0;

        virtual UnitId SpawnHero() = 0;

        virtual void LookAtHero () = 0;
        virtual void LookAtPosition (AZ::Vector3) = 0;

		// server->client proxy
		virtual void SetClientProxy(const AZ::EntityId &playerProxy) = 0;
		virtual void SendClientEvent (AZStd::string name, AZStd::string data, AZ::EntityId entity) = 0;

        virtual bool IsLocalPlayer () = 0;
        virtual void SetIsLocalPlayer (const bool&) = 0;
	};
	using GamePlayerInterfaceBus = AZ::EBus<GamePlayerInterface>;
	
	class GamePlayerProxyRequest : public AZ::ComponentBus
	{
	public:
		static const AZ::EBusHandlerPolicy HandlerPolicy = AZ::EBusHandlerPolicy::Single;

		virtual void SendClientEvent (AZStd::string name, AZStd::string data, AZ::EntityId entity) = 0;
	};
	using GamePlayerProxyRequestBus = AZ::EBus<GamePlayerProxyRequest>;

	// System events generated by a GamePlayer
	class GamePlayerEvents : public AZ::EBusTraits
	{
	public:
		// EBusTraits overrides
		static const AZ::EBusAddressPolicy AddressPolicy = AZ::EBusAddressPolicy::Single;
		static const AZ::EBusHandlerPolicy HandlerPolicy = AZ::EBusHandlerPolicy::Multiple;

		// GamePlayerEvents

		// New player joined the game
		virtual void OnGamePlayerJoined(AZ::EntityId) { }
		// Player left the game
		virtual void OnGamePlayerLeft(AZ::EntityId) { }
	};

	using GamePlayerEventsBus = AZ::EBus<GamePlayerEvents>;

	// Events Generated by a GamePlayer
	class GamePlayerNotifications : public AZ::ComponentBus
	{
	public:
		// EBusTraits overrides
		static const AZ::EBusHandlerPolicy HandlerPolicy = AZ::EBusHandlerPolicy::Multiple;

		// GamePlayerNotifications
		virtual void OnHeroSelected(AZStd::string) { }
		virtual void OnHeroSpawned(AZ::EntityId) { }
		virtual void OnClientEvent(AZStd::string, AZStd::string, AZ::EntityId) { }
	};

	using GamePlayerNotificationBus = AZ::EBus<GamePlayerNotifications>;


	class GamePlayerIdRequest
		: public GamePlayerInterface
	{
	public:
		// EBusTraits
		static const AZ::EBusHandlerPolicy HandlerPolicy = AZ::EBusHandlerPolicy::Single;
		static const AZ::EBusAddressPolicy AddressPolicy = AZ::EBusAddressPolicy::ById;
		typedef SparkPlayerId BusIdType;

		// GamePlayerIdRequest
		virtual AZ::EntityId GetPlayerEntity () = 0;
	};
	using GamePlayerIdRequestBus = AZ::EBus<GamePlayerIdRequest>;

	class GamePlayerPeerRequest
		: public GamePlayerInterface
	{
	public:
		// EBusTraits
		static const AZ::EBusHandlerPolicy HandlerPolicy = AZ::EBusHandlerPolicy::Single;
		static const AZ::EBusAddressPolicy AddressPolicy = AZ::EBusAddressPolicy::ById;
		typedef SparkPlayerId BusIdType;

		// GamePlayerPeerRequest
		virtual AZ::EntityId GetPlayerEntity () = 0;
	};
	using GamePlayerPeerRequestBus = AZ::EBus<GamePlayerPeerRequest>;
}
